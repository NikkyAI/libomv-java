/**
 * Copyright (c) 2006, Second Life Reverse Engineering Team
 * Portions Copyright (c) 2006, Lateral Arts Limited
 * Portions Copyright (c) 2009-2011, Frederick Martian
 * All rights reserved.
 *
 * - Redistribution and use in source and binary forms, with or without 
 *   modification, are permitted provided that the following conditions are met:
 * - Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * - Neither the name of the openmetaverse.org nor the names 
 *   of its contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 */ 
package libomv.packets;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

import libomv.utils.Helpers;
import libomv.StructuredData.OSDMap;
import libomv.capabilities.CapsMessage.CapsEventType;
import libomv.types.PacketHeader;
import libomv.types.PacketFrequency;

public abstract class Packet
{
    public static final int MTU = 1200;

    public boolean hasVariableBlocks;
    public abstract PacketHeader getHeader();
    public abstract void setHeader(PacketHeader value);
    public abstract PacketType getType();
    public abstract int getLength();
    // Serializes the packet in to a byte array
    // return A byte array containing the serialized packet payload, ready to be sent across the wire
    public abstract ByteBuffer ToBytes() throws Exception;

    public ByteBuffer[] ToBytesMultiple()
    {
         throw new UnsupportedOperationException("ToBytesMultiple()");
    }
    //Get the PacketType for a given packet id and packet frequency
    //<param name="id">The packet ID from the header</param>
    //<param name="frequency">Frequency of this packet</param>
    //<returns>The packet type, or PacketType.Default</returns>
    public static PacketType getType(short id, int frequency)
    {
        switch (frequency)
        {
            case PacketFrequency.Low:
                switch (id)
                {
                        case (short)1: return PacketType.TestMessage;
                        case (short)65531: return PacketType.PacketAck;
                        case (short)65532: return PacketType.OpenCircuit;
                        case (short)65533: return PacketType.CloseCircuit;
                        case (short)2: return PacketType.AddCircuitCode;
                        case (short)3: return PacketType.UseCircuitCode;
                        case (short)4: return PacketType.AvatarTextureUpdate;
                        case (short)5: return PacketType.SimulatorMapUpdate;
                        case (short)6: return PacketType.SimulatorSetMap;
                        case (short)7: return PacketType.SubscribeLoad;
                        case (short)8: return PacketType.UnsubscribeLoad;
                        case (short)9: return PacketType.SimulatorReady;
                        case (short)10: return PacketType.TelehubInfo;
                        case (short)11: return PacketType.SimulatorPresentAtLocation;
                        case (short)12: return PacketType.SimulatorLoad;
                        case (short)13: return PacketType.SimulatorShutdownRequest;
                        case (short)14: return PacketType.RegionPresenceRequestByRegionID;
                        case (short)15: return PacketType.RegionPresenceRequestByHandle;
                        case (short)16: return PacketType.RegionPresenceResponse;
                        case (short)17: return PacketType.UpdateSimulator;
                        case (short)18: return PacketType.LogDwellTime;
                        case (short)19: return PacketType.FeatureDisabled;
                        case (short)20: return PacketType.LogFailedMoneyTransaction;
                        case (short)21: return PacketType.UserReportInternal;
                        case (short)22: return PacketType.SetSimStatusInDatabase;
                        case (short)23: return PacketType.SetSimPresenceInDatabase;
                        case (short)24: return PacketType.EconomyDataRequest;
                        case (short)25: return PacketType.EconomyData;
                        case (short)26: return PacketType.AvatarPickerRequest;
                        case (short)27: return PacketType.AvatarPickerRequestBackend;
                        case (short)28: return PacketType.AvatarPickerReply;
                        case (short)29: return PacketType.PlacesQuery;
                        case (short)30: return PacketType.PlacesReply;
                        case (short)31: return PacketType.DirFindQuery;
                        case (short)32: return PacketType.DirFindQueryBackend;
                        case (short)33: return PacketType.DirPlacesQuery;
                        case (short)34: return PacketType.DirPlacesQueryBackend;
                        case (short)35: return PacketType.DirPlacesReply;
                        case (short)36: return PacketType.DirPeopleReply;
                        case (short)37: return PacketType.DirEventsReply;
                        case (short)38: return PacketType.DirGroupsReply;
                        case (short)39: return PacketType.DirClassifiedQuery;
                        case (short)40: return PacketType.DirClassifiedQueryBackend;
                        case (short)41: return PacketType.DirClassifiedReply;
                        case (short)42: return PacketType.AvatarClassifiedReply;
                        case (short)43: return PacketType.ClassifiedInfoRequest;
                        case (short)44: return PacketType.ClassifiedInfoReply;
                        case (short)45: return PacketType.ClassifiedInfoUpdate;
                        case (short)46: return PacketType.ClassifiedDelete;
                        case (short)47: return PacketType.ClassifiedGodDelete;
                        case (short)48: return PacketType.DirLandQuery;
                        case (short)49: return PacketType.DirLandQueryBackend;
                        case (short)50: return PacketType.DirLandReply;
                        case (short)51: return PacketType.DirPopularQuery;
                        case (short)52: return PacketType.DirPopularQueryBackend;
                        case (short)53: return PacketType.DirPopularReply;
                        case (short)54: return PacketType.ParcelInfoRequest;
                        case (short)55: return PacketType.ParcelInfoReply;
                        case (short)56: return PacketType.ParcelObjectOwnersRequest;
                        case (short)57: return PacketType.ParcelObjectOwnersReply;
                        case (short)58: return PacketType.GroupNoticesListRequest;
                        case (short)59: return PacketType.GroupNoticesListReply;
                        case (short)60: return PacketType.GroupNoticeRequest;
                        case (short)61: return PacketType.GroupNoticeAdd;
                        case (short)62: return PacketType.TeleportRequest;
                        case (short)63: return PacketType.TeleportLocationRequest;
                        case (short)64: return PacketType.TeleportLocal;
                        case (short)65: return PacketType.TeleportLandmarkRequest;
                        case (short)66: return PacketType.TeleportProgress;
                        case (short)67: return PacketType.DataHomeLocationRequest;
                        case (short)68: return PacketType.DataHomeLocationReply;
                        case (short)69: return PacketType.TeleportFinish;
                        case (short)70: return PacketType.StartLure;
                        case (short)71: return PacketType.TeleportLureRequest;
                        case (short)72: return PacketType.TeleportCancel;
                        case (short)73: return PacketType.TeleportStart;
                        case (short)74: return PacketType.TeleportFailed;
                        case (short)75: return PacketType.Undo;
                        case (short)76: return PacketType.Redo;
                        case (short)77: return PacketType.UndoLand;
                        case (short)78: return PacketType.AgentPause;
                        case (short)79: return PacketType.AgentResume;
                        case (short)80: return PacketType.ChatFromViewer;
                        case (short)81: return PacketType.AgentThrottle;
                        case (short)82: return PacketType.AgentFOV;
                        case (short)83: return PacketType.AgentHeightWidth;
                        case (short)84: return PacketType.AgentSetAppearance;
                        case (short)85: return PacketType.AgentQuitCopy;
                        case (short)86: return PacketType.ImageNotInDatabase;
                        case (short)87: return PacketType.RebakeAvatarTextures;
                        case (short)88: return PacketType.SetAlwaysRun;
                        case (short)89: return PacketType.ObjectDelete;
                        case (short)90: return PacketType.ObjectDuplicate;
                        case (short)91: return PacketType.ObjectDuplicateOnRay;
                        case (short)92: return PacketType.ObjectScale;
                        case (short)93: return PacketType.ObjectRotation;
                        case (short)94: return PacketType.ObjectFlagUpdate;
                        case (short)95: return PacketType.ObjectClickAction;
                        case (short)96: return PacketType.ObjectImage;
                        case (short)97: return PacketType.ObjectMaterial;
                        case (short)98: return PacketType.ObjectShape;
                        case (short)99: return PacketType.ObjectExtraParams;
                        case (short)100: return PacketType.ObjectOwner;
                        case (short)101: return PacketType.ObjectGroup;
                        case (short)102: return PacketType.ObjectBuy;
                        case (short)103: return PacketType.BuyObjectInventory;
                        case (short)104: return PacketType.DerezContainer;
                        case (short)105: return PacketType.ObjectPermissions;
                        case (short)106: return PacketType.ObjectSaleInfo;
                        case (short)107: return PacketType.ObjectName;
                        case (short)108: return PacketType.ObjectDescription;
                        case (short)109: return PacketType.ObjectCategory;
                        case (short)110: return PacketType.ObjectSelect;
                        case (short)111: return PacketType.ObjectDeselect;
                        case (short)112: return PacketType.ObjectAttach;
                        case (short)113: return PacketType.ObjectDetach;
                        case (short)114: return PacketType.ObjectDrop;
                        case (short)115: return PacketType.ObjectLink;
                        case (short)116: return PacketType.ObjectDelink;
                        case (short)117: return PacketType.ObjectGrab;
                        case (short)118: return PacketType.ObjectGrabUpdate;
                        case (short)119: return PacketType.ObjectDeGrab;
                        case (short)120: return PacketType.ObjectSpinStart;
                        case (short)121: return PacketType.ObjectSpinUpdate;
                        case (short)122: return PacketType.ObjectSpinStop;
                        case (short)123: return PacketType.ObjectExportSelected;
                        case (short)124: return PacketType.ModifyLand;
                        case (short)125: return PacketType.VelocityInterpolateOn;
                        case (short)126: return PacketType.VelocityInterpolateOff;
                        case (short)127: return PacketType.StateSave;
                        case (short)128: return PacketType.ReportAutosaveCrash;
                        case (short)129: return PacketType.SimWideDeletes;
                        case (short)130: return PacketType.TrackAgent;
                        case (short)131: return PacketType.ViewerStats;
                        case (short)132: return PacketType.ScriptAnswerYes;
                        case (short)133: return PacketType.UserReport;
                        case (short)134: return PacketType.AlertMessage;
                        case (short)135: return PacketType.AgentAlertMessage;
                        case (short)136: return PacketType.MeanCollisionAlert;
                        case (short)137: return PacketType.ViewerFrozenMessage;
                        case (short)138: return PacketType.HealthMessage;
                        case (short)139: return PacketType.ChatFromSimulator;
                        case (short)140: return PacketType.SimStats;
                        case (short)141: return PacketType.RequestRegionInfo;
                        case (short)142: return PacketType.RegionInfo;
                        case (short)143: return PacketType.GodUpdateRegionInfo;
                        case (short)144: return PacketType.NearestLandingRegionRequest;
                        case (short)145: return PacketType.NearestLandingRegionReply;
                        case (short)146: return PacketType.NearestLandingRegionUpdated;
                        case (short)147: return PacketType.TeleportLandingStatusChanged;
                        case (short)148: return PacketType.RegionHandshake;
                        case (short)149: return PacketType.RegionHandshakeReply;
                        case (short)150: return PacketType.SimulatorViewerTimeMessage;
                        case (short)151: return PacketType.EnableSimulator;
                        case (short)152: return PacketType.DisableSimulator;
                        case (short)153: return PacketType.TransferRequest;
                        case (short)154: return PacketType.TransferInfo;
                        case (short)155: return PacketType.TransferAbort;
                        case (short)156: return PacketType.RequestXfer;
                        case (short)157: return PacketType.AbortXfer;
                        case (short)158: return PacketType.AvatarAppearance;
                        case (short)159: return PacketType.SetFollowCamProperties;
                        case (short)160: return PacketType.ClearFollowCamProperties;
                        case (short)161: return PacketType.RequestPayPrice;
                        case (short)162: return PacketType.PayPriceReply;
                        case (short)163: return PacketType.KickUser;
                        case (short)164: return PacketType.KickUserAck;
                        case (short)165: return PacketType.GodKickUser;
                        case (short)166: return PacketType.SystemKickUser;
                        case (short)167: return PacketType.EjectUser;
                        case (short)168: return PacketType.FreezeUser;
                        case (short)169: return PacketType.AvatarPropertiesRequest;
                        case (short)170: return PacketType.AvatarPropertiesRequestBackend;
                        case (short)171: return PacketType.AvatarPropertiesReply;
                        case (short)172: return PacketType.AvatarInterestsReply;
                        case (short)173: return PacketType.AvatarGroupsReply;
                        case (short)174: return PacketType.AvatarPropertiesUpdate;
                        case (short)175: return PacketType.AvatarInterestsUpdate;
                        case (short)176: return PacketType.AvatarNotesReply;
                        case (short)177: return PacketType.AvatarNotesUpdate;
                        case (short)178: return PacketType.AvatarPicksReply;
                        case (short)179: return PacketType.EventInfoRequest;
                        case (short)180: return PacketType.EventInfoReply;
                        case (short)181: return PacketType.EventNotificationAddRequest;
                        case (short)182: return PacketType.EventNotificationRemoveRequest;
                        case (short)183: return PacketType.EventGodDelete;
                        case (short)184: return PacketType.PickInfoReply;
                        case (short)185: return PacketType.PickInfoUpdate;
                        case (short)186: return PacketType.PickDelete;
                        case (short)187: return PacketType.PickGodDelete;
                        case (short)188: return PacketType.ScriptQuestion;
                        case (short)189: return PacketType.ScriptControlChange;
                        case (short)190: return PacketType.ScriptDialog;
                        case (short)191: return PacketType.ScriptDialogReply;
                        case (short)192: return PacketType.ForceScriptControlRelease;
                        case (short)193: return PacketType.RevokePermissions;
                        case (short)194: return PacketType.LoadURL;
                        case (short)195: return PacketType.ScriptTeleportRequest;
                        case (short)196: return PacketType.ParcelOverlay;
                        case (short)197: return PacketType.ParcelPropertiesRequestByID;
                        case (short)198: return PacketType.ParcelPropertiesUpdate;
                        case (short)199: return PacketType.ParcelReturnObjects;
                        case (short)200: return PacketType.ParcelSetOtherCleanTime;
                        case (short)201: return PacketType.ParcelDisableObjects;
                        case (short)202: return PacketType.ParcelSelectObjects;
                        case (short)203: return PacketType.EstateCovenantRequest;
                        case (short)204: return PacketType.EstateCovenantReply;
                        case (short)205: return PacketType.ForceObjectSelect;
                        case (short)206: return PacketType.ParcelBuyPass;
                        case (short)207: return PacketType.ParcelDeedToGroup;
                        case (short)208: return PacketType.ParcelReclaim;
                        case (short)209: return PacketType.ParcelClaim;
                        case (short)210: return PacketType.ParcelJoin;
                        case (short)211: return PacketType.ParcelDivide;
                        case (short)212: return PacketType.ParcelRelease;
                        case (short)213: return PacketType.ParcelBuy;
                        case (short)214: return PacketType.ParcelGodForceOwner;
                        case (short)215: return PacketType.ParcelAccessListRequest;
                        case (short)216: return PacketType.ParcelAccessListReply;
                        case (short)217: return PacketType.ParcelAccessListUpdate;
                        case (short)218: return PacketType.ParcelDwellRequest;
                        case (short)219: return PacketType.ParcelDwellReply;
                        case (short)220: return PacketType.RequestParcelTransfer;
                        case (short)221: return PacketType.UpdateParcel;
                        case (short)222: return PacketType.RemoveParcel;
                        case (short)223: return PacketType.MergeParcel;
                        case (short)224: return PacketType.LogParcelChanges;
                        case (short)225: return PacketType.CheckParcelSales;
                        case (short)226: return PacketType.ParcelSales;
                        case (short)227: return PacketType.ParcelGodMarkAsContent;
                        case (short)228: return PacketType.ViewerStartAuction;
                        case (short)229: return PacketType.StartAuction;
                        case (short)230: return PacketType.ConfirmAuctionStart;
                        case (short)231: return PacketType.CompleteAuction;
                        case (short)232: return PacketType.CancelAuction;
                        case (short)233: return PacketType.CheckParcelAuctions;
                        case (short)234: return PacketType.ParcelAuctions;
                        case (short)235: return PacketType.UUIDNameRequest;
                        case (short)236: return PacketType.UUIDNameReply;
                        case (short)237: return PacketType.UUIDGroupNameRequest;
                        case (short)238: return PacketType.UUIDGroupNameReply;
                        case (short)239: return PacketType.ChatPass;
                        case (short)240: return PacketType.ChildAgentDying;
                        case (short)241: return PacketType.ChildAgentUnknown;
                        case (short)242: return PacketType.KillChildAgents;
                        case (short)243: return PacketType.GetScriptRunning;
                        case (short)244: return PacketType.ScriptRunningReply;
                        case (short)245: return PacketType.SetScriptRunning;
                        case (short)246: return PacketType.ScriptReset;
                        case (short)247: return PacketType.ScriptSensorRequest;
                        case (short)248: return PacketType.ScriptSensorReply;
                        case (short)249: return PacketType.CompleteAgentMovement;
                        case (short)250: return PacketType.AgentMovementComplete;
                        case (short)251: return PacketType.DataServerLogout;
                        case (short)252: return PacketType.LogoutRequest;
                        case (short)253: return PacketType.LogoutReply;
                        case (short)254: return PacketType.ImprovedInstantMessage;
                        case (short)255: return PacketType.RetrieveInstantMessages;
                        case (short)256: return PacketType.FindAgent;
                        case (short)257: return PacketType.RequestGodlikePowers;
                        case (short)258: return PacketType.GrantGodlikePowers;
                        case (short)259: return PacketType.GodlikeMessage;
                        case (short)260: return PacketType.EstateOwnerMessage;
                        case (short)261: return PacketType.GenericMessage;
                        case (short)262: return PacketType.MuteListRequest;
                        case (short)263: return PacketType.UpdateMuteListEntry;
                        case (short)264: return PacketType.RemoveMuteListEntry;
                        case (short)265: return PacketType.CopyInventoryFromNotecard;
                        case (short)266: return PacketType.UpdateInventoryItem;
                        case (short)267: return PacketType.UpdateCreateInventoryItem;
                        case (short)268: return PacketType.MoveInventoryItem;
                        case (short)269: return PacketType.CopyInventoryItem;
                        case (short)270: return PacketType.RemoveInventoryItem;
                        case (short)271: return PacketType.ChangeInventoryItemFlags;
                        case (short)272: return PacketType.SaveAssetIntoInventory;
                        case (short)273: return PacketType.CreateInventoryFolder;
                        case (short)274: return PacketType.UpdateInventoryFolder;
                        case (short)275: return PacketType.MoveInventoryFolder;
                        case (short)276: return PacketType.RemoveInventoryFolder;
                        case (short)277: return PacketType.FetchInventoryDescendents;
                        case (short)278: return PacketType.InventoryDescendents;
                        case (short)279: return PacketType.FetchInventory;
                        case (short)280: return PacketType.FetchInventoryReply;
                        case (short)281: return PacketType.BulkUpdateInventory;
                        case (short)282: return PacketType.RequestInventoryAsset;
                        case (short)283: return PacketType.InventoryAssetResponse;
                        case (short)284: return PacketType.RemoveInventoryObjects;
                        case (short)285: return PacketType.PurgeInventoryDescendents;
                        case (short)286: return PacketType.UpdateTaskInventory;
                        case (short)287: return PacketType.RemoveTaskInventory;
                        case (short)288: return PacketType.MoveTaskInventory;
                        case (short)289: return PacketType.RequestTaskInventory;
                        case (short)290: return PacketType.ReplyTaskInventory;
                        case (short)291: return PacketType.DeRezObject;
                        case (short)292: return PacketType.DeRezAck;
                        case (short)293: return PacketType.RezObject;
                        case (short)294: return PacketType.RezObjectFromNotecard;
                        case (short)295: return PacketType.TransferInventory;
                        case (short)296: return PacketType.TransferInventoryAck;
                        case (short)297: return PacketType.AcceptFriendship;
                        case (short)298: return PacketType.DeclineFriendship;
                        case (short)299: return PacketType.FormFriendship;
                        case (short)300: return PacketType.TerminateFriendship;
                        case (short)301: return PacketType.OfferCallingCard;
                        case (short)302: return PacketType.AcceptCallingCard;
                        case (short)303: return PacketType.DeclineCallingCard;
                        case (short)304: return PacketType.RezScript;
                        case (short)305: return PacketType.CreateInventoryItem;
                        case (short)306: return PacketType.CreateLandmarkForEvent;
                        case (short)307: return PacketType.EventLocationRequest;
                        case (short)308: return PacketType.EventLocationReply;
                        case (short)309: return PacketType.RegionHandleRequest;
                        case (short)310: return PacketType.RegionIDAndHandleReply;
                        case (short)311: return PacketType.MoneyTransferRequest;
                        case (short)312: return PacketType.MoneyTransferBackend;
                        case (short)313: return PacketType.MoneyBalanceRequest;
                        case (short)314: return PacketType.MoneyBalanceReply;
                        case (short)315: return PacketType.RoutedMoneyBalanceReply;
                        case (short)316: return PacketType.ActivateGestures;
                        case (short)317: return PacketType.DeactivateGestures;
                        case (short)318: return PacketType.MuteListUpdate;
                        case (short)319: return PacketType.UseCachedMuteList;
                        case (short)320: return PacketType.GrantUserRights;
                        case (short)321: return PacketType.ChangeUserRights;
                        case (short)322: return PacketType.OnlineNotification;
                        case (short)323: return PacketType.OfflineNotification;
                        case (short)324: return PacketType.SetStartLocationRequest;
                        case (short)325: return PacketType.SetStartLocation;
                        case (short)326: return PacketType.NetTest;
                        case (short)327: return PacketType.SetCPURatio;
                        case (short)328: return PacketType.SimCrashed;
                        case (short)329: return PacketType.NameValuePair;
                        case (short)330: return PacketType.RemoveNameValuePair;
                        case (short)331: return PacketType.UpdateAttachment;
                        case (short)332: return PacketType.RemoveAttachment;
                        case (short)333: return PacketType.AssetUploadRequest;
                        case (short)334: return PacketType.AssetUploadComplete;
                        case (short)335: return PacketType.EmailMessageRequest;
                        case (short)336: return PacketType.EmailMessageReply;
                        case (short)337: return PacketType.ScriptDataRequest;
                        case (short)338: return PacketType.ScriptDataReply;
                        case (short)339: return PacketType.CreateGroupRequest;
                        case (short)340: return PacketType.CreateGroupReply;
                        case (short)341: return PacketType.UpdateGroupInfo;
                        case (short)342: return PacketType.GroupRoleChanges;
                        case (short)343: return PacketType.JoinGroupRequest;
                        case (short)344: return PacketType.JoinGroupReply;
                        case (short)345: return PacketType.EjectGroupMemberRequest;
                        case (short)346: return PacketType.EjectGroupMemberReply;
                        case (short)347: return PacketType.LeaveGroupRequest;
                        case (short)348: return PacketType.LeaveGroupReply;
                        case (short)349: return PacketType.InviteGroupRequest;
                        case (short)350: return PacketType.InviteGroupResponse;
                        case (short)351: return PacketType.GroupProfileRequest;
                        case (short)352: return PacketType.GroupProfileReply;
                        case (short)353: return PacketType.GroupAccountSummaryRequest;
                        case (short)354: return PacketType.GroupAccountSummaryReply;
                        case (short)355: return PacketType.GroupAccountDetailsRequest;
                        case (short)356: return PacketType.GroupAccountDetailsReply;
                        case (short)357: return PacketType.GroupAccountTransactionsRequest;
                        case (short)358: return PacketType.GroupAccountTransactionsReply;
                        case (short)359: return PacketType.GroupActiveProposalsRequest;
                        case (short)360: return PacketType.GroupActiveProposalItemReply;
                        case (short)361: return PacketType.GroupVoteHistoryRequest;
                        case (short)362: return PacketType.GroupVoteHistoryItemReply;
                        case (short)363: return PacketType.StartGroupProposal;
                        case (short)364: return PacketType.GroupProposalBallot;
                        case (short)365: return PacketType.TallyVotes;
                        case (short)366: return PacketType.GroupMembersRequest;
                        case (short)367: return PacketType.GroupMembersReply;
                        case (short)368: return PacketType.ActivateGroup;
                        case (short)369: return PacketType.SetGroupContribution;
                        case (short)370: return PacketType.SetGroupAcceptNotices;
                        case (short)371: return PacketType.GroupRoleDataRequest;
                        case (short)372: return PacketType.GroupRoleDataReply;
                        case (short)373: return PacketType.GroupRoleMembersRequest;
                        case (short)374: return PacketType.GroupRoleMembersReply;
                        case (short)375: return PacketType.GroupTitlesRequest;
                        case (short)376: return PacketType.GroupTitlesReply;
                        case (short)377: return PacketType.GroupTitleUpdate;
                        case (short)378: return PacketType.GroupRoleUpdate;
                        case (short)379: return PacketType.LiveHelpGroupRequest;
                        case (short)380: return PacketType.LiveHelpGroupReply;
                        case (short)381: return PacketType.AgentWearablesRequest;
                        case (short)382: return PacketType.AgentWearablesUpdate;
                        case (short)383: return PacketType.AgentIsNowWearing;
                        case (short)384: return PacketType.AgentCachedTexture;
                        case (short)385: return PacketType.AgentCachedTextureResponse;
                        case (short)386: return PacketType.AgentDataUpdateRequest;
                        case (short)387: return PacketType.AgentDataUpdate;
                        case (short)388: return PacketType.GroupDataUpdate;
                        case (short)389: return PacketType.AgentGroupDataUpdate;
                        case (short)390: return PacketType.AgentDropGroup;
                        case (short)391: return PacketType.LogTextMessage;
                        case (short)392: return PacketType.CreateTrustedCircuit;
                        case (short)393: return PacketType.DenyTrustedCircuit;
                        case (short)394: return PacketType.RequestTrustedCircuit;
                        case (short)395: return PacketType.RezSingleAttachmentFromInv;
                        case (short)396: return PacketType.RezMultipleAttachmentsFromInv;
                        case (short)397: return PacketType.DetachAttachmentIntoInv;
                        case (short)398: return PacketType.CreateNewOutfitAttachments;
                        case (short)399: return PacketType.UserInfoRequest;
                        case (short)400: return PacketType.UserInfoReply;
                        case (short)401: return PacketType.UpdateUserInfo;
                        case (short)402: return PacketType.ParcelRename;
                        case (short)403: return PacketType.InitiateDownload;
                        case (short)404: return PacketType.SystemMessage;
                        case (short)405: return PacketType.MapLayerRequest;
                        case (short)406: return PacketType.MapLayerReply;
                        case (short)407: return PacketType.MapBlockRequest;
                        case (short)408: return PacketType.MapNameRequest;
                        case (short)409: return PacketType.MapBlockReply;
                        case (short)410: return PacketType.MapItemRequest;
                        case (short)411: return PacketType.MapItemReply;
                        case (short)412: return PacketType.SendPostcard;
                        case (short)413: return PacketType.RpcChannelRequest;
                        case (short)414: return PacketType.RpcChannelReply;
                        case (short)415: return PacketType.RpcScriptRequestInbound;
                        case (short)416: return PacketType.RpcScriptRequestInboundForward;
                        case (short)417: return PacketType.RpcScriptReplyInbound;
                        case (short)418: return PacketType.ScriptMailRegistration;
                        case (short)419: return PacketType.ParcelMediaCommandMessage;
                        case (short)420: return PacketType.ParcelMediaUpdate;
                        case (short)421: return PacketType.LandStatRequest;
                        case (short)422: return PacketType.LandStatReply;
                        case (short)423: return PacketType.Error;
                        case (short)424: return PacketType.ObjectIncludeInSearch;
                        case (short)425: return PacketType.RezRestoreToWorld;
                    }
                    break;
                case PacketFrequency.Medium:
                    switch (id)
                    {
                        case (short)1: return PacketType.ObjectAdd;
                        case (short)2: return PacketType.MultipleObjectUpdate;
                        case (short)3: return PacketType.RequestMultipleObjects;
                        case (short)4: return PacketType.ObjectPosition;
                        case (short)5: return PacketType.RequestObjectPropertiesFamily;
                        case (short)6: return PacketType.CoarseLocationUpdate;
                        case (short)7: return PacketType.CrossedRegion;
                        case (short)8: return PacketType.ConfirmEnableSimulator;
                        case (short)9: return PacketType.ObjectProperties;
                        case (short)10: return PacketType.ObjectPropertiesFamily;
                        case (short)11: return PacketType.ParcelPropertiesRequest;
                        case (short)12: return PacketType.SimStatus;
                        case (short)13: return PacketType.AttachedSound;
                        case (short)14: return PacketType.AttachedSoundGainChange;
                        case (short)15: return PacketType.PreloadSound;
                        case (short)16: return PacketType.InternalScriptMail;
                        case (short)17: return PacketType.ViewerEffect;
                    }
                    break;
                case PacketFrequency.High:
                    switch (id)
                    {
                        case (short)1: return PacketType.StartPingCheck;
                        case (short)2: return PacketType.CompletePingCheck;
                        case (short)3: return PacketType.NeighborList;
                        case (short)4: return PacketType.AgentUpdate;
                        case (short)5: return PacketType.AgentAnimation;
                        case (short)6: return PacketType.AgentRequestSit;
                        case (short)7: return PacketType.AgentSit;
                        case (short)8: return PacketType.RequestImage;
                        case (short)9: return PacketType.ImageData;
                        case (short)10: return PacketType.ImagePacket;
                        case (short)11: return PacketType.LayerData;
                        case (short)12: return PacketType.ObjectUpdate;
                        case (short)13: return PacketType.ObjectUpdateCompressed;
                        case (short)14: return PacketType.ObjectUpdateCached;
                        case (short)15: return PacketType.ImprovedTerseObjectUpdate;
                        case (short)16: return PacketType.KillObject;
                        case (short)17: return PacketType.TransferPacket;
                        case (short)18: return PacketType.SendXferPacket;
                        case (short)19: return PacketType.ConfirmXferPacket;
                        case (short)20: return PacketType.AvatarAnimation;
                        case (short)21: return PacketType.AvatarSitResponse;
                        case (short)22: return PacketType.CameraConstraint;
                        case (short)23: return PacketType.ParcelProperties;
                        case (short)24: return PacketType.EdgeDataPacket;
                        case (short)25: return PacketType.ChildAgentUpdate;
                        case (short)26: return PacketType.ChildAgentAlive;
                        case (short)27: return PacketType.ChildAgentPositionUpdate;
                        case (short)28: return PacketType.AtomicPassObject;
                        case (short)29: return PacketType.SoundTrigger;
                    }
                    break;
            }

            return PacketType.Default;
        }

        /**
         * Construct a packet in it's native class from a capability OSD structure
         *
         * @param bytes Byte array containing the packet, starting at position 0
         * @param packetEnd The last byte of the packet. If the packet was 76 bytes long, packetEnd would be 75
         * @returns The native packet class for this type of packet, typecasted to the generic Packet
         */
        public static Packet BuildPacket(CapsEventType capsKey,  OSDMap map) throws Exception
        {
            return null;
        }


        /**
         * Construct a packet in it's native class from a byte array
         *
         * @param bytes Byte array containing the packet, starting at position 0
         * @param packetEnd The last byte of the packet. If the packet was 76 bytes long, packetEnd would be 75
         * @returns The native packet class for this type of packet, typecasted to the generic Packet
         */        public static Packet BuildPacket(ByteBuffer bytes,  int [] a_packetEnd) throws Exception
        {
            PacketHeader header = new PacketHeader(bytes,  a_packetEnd);
            if (header.getZerocoded())
            {
                byte[] zeroBuffer = new byte[8192];
                a_packetEnd[0] = Helpers.ZeroDecode(bytes, a_packetEnd[0] + 1, zeroBuffer) - 1;
                bytes = ByteBuffer.wrap(zeroBuffer, 0, a_packetEnd[0]);
            }
            bytes.order(ByteOrder.LITTLE_ENDIAN);
            bytes.position(header.getLength());

            switch (header.getFrequency())            {
                case PacketFrequency.Low:
                    switch (header.getID())
                    {
                        case 1: return new TestMessagePacket(header,bytes);
                        case 65531: return new PacketAckPacket(header,bytes);
                        case 65532: return new OpenCircuitPacket(header,bytes);
                        case 65533: return new CloseCircuitPacket(header,bytes);
                        case 2: return new AddCircuitCodePacket(header,bytes);
                        case 3: return new UseCircuitCodePacket(header,bytes);
                        case 4: return new AvatarTextureUpdatePacket(header,bytes);
                        case 5: return new SimulatorMapUpdatePacket(header,bytes);
                        case 6: return new SimulatorSetMapPacket(header,bytes);
                        case 7: return new SubscribeLoadPacket(header,bytes);
                        case 8: return new UnsubscribeLoadPacket(header,bytes);
                        case 9: return new SimulatorReadyPacket(header,bytes);
                        case 10: return new TelehubInfoPacket(header,bytes);
                        case 11: return new SimulatorPresentAtLocationPacket(header,bytes);
                        case 12: return new SimulatorLoadPacket(header,bytes);
                        case 13: return new SimulatorShutdownRequestPacket(header,bytes);
                        case 14: return new RegionPresenceRequestByRegionIDPacket(header,bytes);
                        case 15: return new RegionPresenceRequestByHandlePacket(header,bytes);
                        case 16: return new RegionPresenceResponsePacket(header,bytes);
                        case 17: return new UpdateSimulatorPacket(header,bytes);
                        case 18: return new LogDwellTimePacket(header,bytes);
                        case 19: return new FeatureDisabledPacket(header,bytes);
                        case 20: return new LogFailedMoneyTransactionPacket(header,bytes);
                        case 21: return new UserReportInternalPacket(header,bytes);
                        case 22: return new SetSimStatusInDatabasePacket(header,bytes);
                        case 23: return new SetSimPresenceInDatabasePacket(header,bytes);
                        case 24: return new EconomyDataRequestPacket(header,bytes);
                        case 25: return new EconomyDataPacket(header,bytes);
                        case 26: return new AvatarPickerRequestPacket(header,bytes);
                        case 27: return new AvatarPickerRequestBackendPacket(header,bytes);
                        case 28: return new AvatarPickerReplyPacket(header,bytes);
                        case 29: return new PlacesQueryPacket(header,bytes);
                        case 30: return new PlacesReplyPacket(header,bytes);
                        case 31: return new DirFindQueryPacket(header,bytes);
                        case 32: return new DirFindQueryBackendPacket(header,bytes);
                        case 33: return new DirPlacesQueryPacket(header,bytes);
                        case 34: return new DirPlacesQueryBackendPacket(header,bytes);
                        case 35: return new DirPlacesReplyPacket(header,bytes);
                        case 36: return new DirPeopleReplyPacket(header,bytes);
                        case 37: return new DirEventsReplyPacket(header,bytes);
                        case 38: return new DirGroupsReplyPacket(header,bytes);
                        case 39: return new DirClassifiedQueryPacket(header,bytes);
                        case 40: return new DirClassifiedQueryBackendPacket(header,bytes);
                        case 41: return new DirClassifiedReplyPacket(header,bytes);
                        case 42: return new AvatarClassifiedReplyPacket(header,bytes);
                        case 43: return new ClassifiedInfoRequestPacket(header,bytes);
                        case 44: return new ClassifiedInfoReplyPacket(header,bytes);
                        case 45: return new ClassifiedInfoUpdatePacket(header,bytes);
                        case 46: return new ClassifiedDeletePacket(header,bytes);
                        case 47: return new ClassifiedGodDeletePacket(header,bytes);
                        case 48: return new DirLandQueryPacket(header,bytes);
                        case 49: return new DirLandQueryBackendPacket(header,bytes);
                        case 50: return new DirLandReplyPacket(header,bytes);
                        case 51: return new DirPopularQueryPacket(header,bytes);
                        case 52: return new DirPopularQueryBackendPacket(header,bytes);
                        case 53: return new DirPopularReplyPacket(header,bytes);
                        case 54: return new ParcelInfoRequestPacket(header,bytes);
                        case 55: return new ParcelInfoReplyPacket(header,bytes);
                        case 56: return new ParcelObjectOwnersRequestPacket(header,bytes);
                        case 57: return new ParcelObjectOwnersReplyPacket(header,bytes);
                        case 58: return new GroupNoticesListRequestPacket(header,bytes);
                        case 59: return new GroupNoticesListReplyPacket(header,bytes);
                        case 60: return new GroupNoticeRequestPacket(header,bytes);
                        case 61: return new GroupNoticeAddPacket(header,bytes);
                        case 62: return new TeleportRequestPacket(header,bytes);
                        case 63: return new TeleportLocationRequestPacket(header,bytes);
                        case 64: return new TeleportLocalPacket(header,bytes);
                        case 65: return new TeleportLandmarkRequestPacket(header,bytes);
                        case 66: return new TeleportProgressPacket(header,bytes);
                        case 67: return new DataHomeLocationRequestPacket(header,bytes);
                        case 68: return new DataHomeLocationReplyPacket(header,bytes);
                        case 69: return new TeleportFinishPacket(header,bytes);
                        case 70: return new StartLurePacket(header,bytes);
                        case 71: return new TeleportLureRequestPacket(header,bytes);
                        case 72: return new TeleportCancelPacket(header,bytes);
                        case 73: return new TeleportStartPacket(header,bytes);
                        case 74: return new TeleportFailedPacket(header,bytes);
                        case 75: return new UndoPacket(header,bytes);
                        case 76: return new RedoPacket(header,bytes);
                        case 77: return new UndoLandPacket(header,bytes);
                        case 78: return new AgentPausePacket(header,bytes);
                        case 79: return new AgentResumePacket(header,bytes);
                        case 80: return new ChatFromViewerPacket(header,bytes);
                        case 81: return new AgentThrottlePacket(header,bytes);
                        case 82: return new AgentFOVPacket(header,bytes);
                        case 83: return new AgentHeightWidthPacket(header,bytes);
                        case 84: return new AgentSetAppearancePacket(header,bytes);
                        case 85: return new AgentQuitCopyPacket(header,bytes);
                        case 86: return new ImageNotInDatabasePacket(header,bytes);
                        case 87: return new RebakeAvatarTexturesPacket(header,bytes);
                        case 88: return new SetAlwaysRunPacket(header,bytes);
                        case 89: return new ObjectDeletePacket(header,bytes);
                        case 90: return new ObjectDuplicatePacket(header,bytes);
                        case 91: return new ObjectDuplicateOnRayPacket(header,bytes);
                        case 92: return new ObjectScalePacket(header,bytes);
                        case 93: return new ObjectRotationPacket(header,bytes);
                        case 94: return new ObjectFlagUpdatePacket(header,bytes);
                        case 95: return new ObjectClickActionPacket(header,bytes);
                        case 96: return new ObjectImagePacket(header,bytes);
                        case 97: return new ObjectMaterialPacket(header,bytes);
                        case 98: return new ObjectShapePacket(header,bytes);
                        case 99: return new ObjectExtraParamsPacket(header,bytes);
                        case 100: return new ObjectOwnerPacket(header,bytes);
                        case 101: return new ObjectGroupPacket(header,bytes);
                        case 102: return new ObjectBuyPacket(header,bytes);
                        case 103: return new BuyObjectInventoryPacket(header,bytes);
                        case 104: return new DerezContainerPacket(header,bytes);
                        case 105: return new ObjectPermissionsPacket(header,bytes);
                        case 106: return new ObjectSaleInfoPacket(header,bytes);
                        case 107: return new ObjectNamePacket(header,bytes);
                        case 108: return new ObjectDescriptionPacket(header,bytes);
                        case 109: return new ObjectCategoryPacket(header,bytes);
                        case 110: return new ObjectSelectPacket(header,bytes);
                        case 111: return new ObjectDeselectPacket(header,bytes);
                        case 112: return new ObjectAttachPacket(header,bytes);
                        case 113: return new ObjectDetachPacket(header,bytes);
                        case 114: return new ObjectDropPacket(header,bytes);
                        case 115: return new ObjectLinkPacket(header,bytes);
                        case 116: return new ObjectDelinkPacket(header,bytes);
                        case 117: return new ObjectGrabPacket(header,bytes);
                        case 118: return new ObjectGrabUpdatePacket(header,bytes);
                        case 119: return new ObjectDeGrabPacket(header,bytes);
                        case 120: return new ObjectSpinStartPacket(header,bytes);
                        case 121: return new ObjectSpinUpdatePacket(header,bytes);
                        case 122: return new ObjectSpinStopPacket(header,bytes);
                        case 123: return new ObjectExportSelectedPacket(header,bytes);
                        case 124: return new ModifyLandPacket(header,bytes);
                        case 125: return new VelocityInterpolateOnPacket(header,bytes);
                        case 126: return new VelocityInterpolateOffPacket(header,bytes);
                        case 127: return new StateSavePacket(header,bytes);
                        case 128: return new ReportAutosaveCrashPacket(header,bytes);
                        case 129: return new SimWideDeletesPacket(header,bytes);
                        case 130: return new TrackAgentPacket(header,bytes);
                        case 131: return new ViewerStatsPacket(header,bytes);
                        case 132: return new ScriptAnswerYesPacket(header,bytes);
                        case 133: return new UserReportPacket(header,bytes);
                        case 134: return new AlertMessagePacket(header,bytes);
                        case 135: return new AgentAlertMessagePacket(header,bytes);
                        case 136: return new MeanCollisionAlertPacket(header,bytes);
                        case 137: return new ViewerFrozenMessagePacket(header,bytes);
                        case 138: return new HealthMessagePacket(header,bytes);
                        case 139: return new ChatFromSimulatorPacket(header,bytes);
                        case 140: return new SimStatsPacket(header,bytes);
                        case 141: return new RequestRegionInfoPacket(header,bytes);
                        case 142: return new RegionInfoPacket(header,bytes);
                        case 143: return new GodUpdateRegionInfoPacket(header,bytes);
                        case 144: return new NearestLandingRegionRequestPacket(header,bytes);
                        case 145: return new NearestLandingRegionReplyPacket(header,bytes);
                        case 146: return new NearestLandingRegionUpdatedPacket(header,bytes);
                        case 147: return new TeleportLandingStatusChangedPacket(header,bytes);
                        case 148: return new RegionHandshakePacket(header,bytes);
                        case 149: return new RegionHandshakeReplyPacket(header,bytes);
                        case 150: return new SimulatorViewerTimeMessagePacket(header,bytes);
                        case 151: return new EnableSimulatorPacket(header,bytes);
                        case 152: return new DisableSimulatorPacket(header,bytes);
                        case 153: return new TransferRequestPacket(header,bytes);
                        case 154: return new TransferInfoPacket(header,bytes);
                        case 155: return new TransferAbortPacket(header,bytes);
                        case 156: return new RequestXferPacket(header,bytes);
                        case 157: return new AbortXferPacket(header,bytes);
                        case 158: return new AvatarAppearancePacket(header,bytes);
                        case 159: return new SetFollowCamPropertiesPacket(header,bytes);
                        case 160: return new ClearFollowCamPropertiesPacket(header,bytes);
                        case 161: return new RequestPayPricePacket(header,bytes);
                        case 162: return new PayPriceReplyPacket(header,bytes);
                        case 163: return new KickUserPacket(header,bytes);
                        case 164: return new KickUserAckPacket(header,bytes);
                        case 165: return new GodKickUserPacket(header,bytes);
                        case 166: return new SystemKickUserPacket(header,bytes);
                        case 167: return new EjectUserPacket(header,bytes);
                        case 168: return new FreezeUserPacket(header,bytes);
                        case 169: return new AvatarPropertiesRequestPacket(header,bytes);
                        case 170: return new AvatarPropertiesRequestBackendPacket(header,bytes);
                        case 171: return new AvatarPropertiesReplyPacket(header,bytes);
                        case 172: return new AvatarInterestsReplyPacket(header,bytes);
                        case 173: return new AvatarGroupsReplyPacket(header,bytes);
                        case 174: return new AvatarPropertiesUpdatePacket(header,bytes);
                        case 175: return new AvatarInterestsUpdatePacket(header,bytes);
                        case 176: return new AvatarNotesReplyPacket(header,bytes);
                        case 177: return new AvatarNotesUpdatePacket(header,bytes);
                        case 178: return new AvatarPicksReplyPacket(header,bytes);
                        case 179: return new EventInfoRequestPacket(header,bytes);
                        case 180: return new EventInfoReplyPacket(header,bytes);
                        case 181: return new EventNotificationAddRequestPacket(header,bytes);
                        case 182: return new EventNotificationRemoveRequestPacket(header,bytes);
                        case 183: return new EventGodDeletePacket(header,bytes);
                        case 184: return new PickInfoReplyPacket(header,bytes);
                        case 185: return new PickInfoUpdatePacket(header,bytes);
                        case 186: return new PickDeletePacket(header,bytes);
                        case 187: return new PickGodDeletePacket(header,bytes);
                        case 188: return new ScriptQuestionPacket(header,bytes);
                        case 189: return new ScriptControlChangePacket(header,bytes);
                        case 190: return new ScriptDialogPacket(header,bytes);
                        case 191: return new ScriptDialogReplyPacket(header,bytes);
                        case 192: return new ForceScriptControlReleasePacket(header,bytes);
                        case 193: return new RevokePermissionsPacket(header,bytes);
                        case 194: return new LoadURLPacket(header,bytes);
                        case 195: return new ScriptTeleportRequestPacket(header,bytes);
                        case 196: return new ParcelOverlayPacket(header,bytes);
                        case 197: return new ParcelPropertiesRequestByIDPacket(header,bytes);
                        case 198: return new ParcelPropertiesUpdatePacket(header,bytes);
                        case 199: return new ParcelReturnObjectsPacket(header,bytes);
                        case 200: return new ParcelSetOtherCleanTimePacket(header,bytes);
                        case 201: return new ParcelDisableObjectsPacket(header,bytes);
                        case 202: return new ParcelSelectObjectsPacket(header,bytes);
                        case 203: return new EstateCovenantRequestPacket(header,bytes);
                        case 204: return new EstateCovenantReplyPacket(header,bytes);
                        case 205: return new ForceObjectSelectPacket(header,bytes);
                        case 206: return new ParcelBuyPassPacket(header,bytes);
                        case 207: return new ParcelDeedToGroupPacket(header,bytes);
                        case 208: return new ParcelReclaimPacket(header,bytes);
                        case 209: return new ParcelClaimPacket(header,bytes);
                        case 210: return new ParcelJoinPacket(header,bytes);
                        case 211: return new ParcelDividePacket(header,bytes);
                        case 212: return new ParcelReleasePacket(header,bytes);
                        case 213: return new ParcelBuyPacket(header,bytes);
                        case 214: return new ParcelGodForceOwnerPacket(header,bytes);
                        case 215: return new ParcelAccessListRequestPacket(header,bytes);
                        case 216: return new ParcelAccessListReplyPacket(header,bytes);
                        case 217: return new ParcelAccessListUpdatePacket(header,bytes);
                        case 218: return new ParcelDwellRequestPacket(header,bytes);
                        case 219: return new ParcelDwellReplyPacket(header,bytes);
                        case 220: return new RequestParcelTransferPacket(header,bytes);
                        case 221: return new UpdateParcelPacket(header,bytes);
                        case 222: return new RemoveParcelPacket(header,bytes);
                        case 223: return new MergeParcelPacket(header,bytes);
                        case 224: return new LogParcelChangesPacket(header,bytes);
                        case 225: return new CheckParcelSalesPacket(header,bytes);
                        case 226: return new ParcelSalesPacket(header,bytes);
                        case 227: return new ParcelGodMarkAsContentPacket(header,bytes);
                        case 228: return new ViewerStartAuctionPacket(header,bytes);
                        case 229: return new StartAuctionPacket(header,bytes);
                        case 230: return new ConfirmAuctionStartPacket(header,bytes);
                        case 231: return new CompleteAuctionPacket(header,bytes);
                        case 232: return new CancelAuctionPacket(header,bytes);
                        case 233: return new CheckParcelAuctionsPacket(header,bytes);
                        case 234: return new ParcelAuctionsPacket(header,bytes);
                        case 235: return new UUIDNameRequestPacket(header,bytes);
                        case 236: return new UUIDNameReplyPacket(header,bytes);
                        case 237: return new UUIDGroupNameRequestPacket(header,bytes);
                        case 238: return new UUIDGroupNameReplyPacket(header,bytes);
                        case 239: return new ChatPassPacket(header,bytes);
                        case 240: return new ChildAgentDyingPacket(header,bytes);
                        case 241: return new ChildAgentUnknownPacket(header,bytes);
                        case 242: return new KillChildAgentsPacket(header,bytes);
                        case 243: return new GetScriptRunningPacket(header,bytes);
                        case 244: return new ScriptRunningReplyPacket(header,bytes);
                        case 245: return new SetScriptRunningPacket(header,bytes);
                        case 246: return new ScriptResetPacket(header,bytes);
                        case 247: return new ScriptSensorRequestPacket(header,bytes);
                        case 248: return new ScriptSensorReplyPacket(header,bytes);
                        case 249: return new CompleteAgentMovementPacket(header,bytes);
                        case 250: return new AgentMovementCompletePacket(header,bytes);
                        case 251: return new DataServerLogoutPacket(header,bytes);
                        case 252: return new LogoutRequestPacket(header,bytes);
                        case 253: return new LogoutReplyPacket(header,bytes);
                        case 254: return new ImprovedInstantMessagePacket(header,bytes);
                        case 255: return new RetrieveInstantMessagesPacket(header,bytes);
                        case 256: return new FindAgentPacket(header,bytes);
                        case 257: return new RequestGodlikePowersPacket(header,bytes);
                        case 258: return new GrantGodlikePowersPacket(header,bytes);
                        case 259: return new GodlikeMessagePacket(header,bytes);
                        case 260: return new EstateOwnerMessagePacket(header,bytes);
                        case 261: return new GenericMessagePacket(header,bytes);
                        case 262: return new MuteListRequestPacket(header,bytes);
                        case 263: return new UpdateMuteListEntryPacket(header,bytes);
                        case 264: return new RemoveMuteListEntryPacket(header,bytes);
                        case 265: return new CopyInventoryFromNotecardPacket(header,bytes);
                        case 266: return new UpdateInventoryItemPacket(header,bytes);
                        case 267: return new UpdateCreateInventoryItemPacket(header,bytes);
                        case 268: return new MoveInventoryItemPacket(header,bytes);
                        case 269: return new CopyInventoryItemPacket(header,bytes);
                        case 270: return new RemoveInventoryItemPacket(header,bytes);
                        case 271: return new ChangeInventoryItemFlagsPacket(header,bytes);
                        case 272: return new SaveAssetIntoInventoryPacket(header,bytes);
                        case 273: return new CreateInventoryFolderPacket(header,bytes);
                        case 274: return new UpdateInventoryFolderPacket(header,bytes);
                        case 275: return new MoveInventoryFolderPacket(header,bytes);
                        case 276: return new RemoveInventoryFolderPacket(header,bytes);
                        case 277: return new FetchInventoryDescendentsPacket(header,bytes);
                        case 278: return new InventoryDescendentsPacket(header,bytes);
                        case 279: return new FetchInventoryPacket(header,bytes);
                        case 280: return new FetchInventoryReplyPacket(header,bytes);
                        case 281: return new BulkUpdateInventoryPacket(header,bytes);
                        case 282: return new RequestInventoryAssetPacket(header,bytes);
                        case 283: return new InventoryAssetResponsePacket(header,bytes);
                        case 284: return new RemoveInventoryObjectsPacket(header,bytes);
                        case 285: return new PurgeInventoryDescendentsPacket(header,bytes);
                        case 286: return new UpdateTaskInventoryPacket(header,bytes);
                        case 287: return new RemoveTaskInventoryPacket(header,bytes);
                        case 288: return new MoveTaskInventoryPacket(header,bytes);
                        case 289: return new RequestTaskInventoryPacket(header,bytes);
                        case 290: return new ReplyTaskInventoryPacket(header,bytes);
                        case 291: return new DeRezObjectPacket(header,bytes);
                        case 292: return new DeRezAckPacket(header,bytes);
                        case 293: return new RezObjectPacket(header,bytes);
                        case 294: return new RezObjectFromNotecardPacket(header,bytes);
                        case 295: return new TransferInventoryPacket(header,bytes);
                        case 296: return new TransferInventoryAckPacket(header,bytes);
                        case 297: return new AcceptFriendshipPacket(header,bytes);
                        case 298: return new DeclineFriendshipPacket(header,bytes);
                        case 299: return new FormFriendshipPacket(header,bytes);
                        case 300: return new TerminateFriendshipPacket(header,bytes);
                        case 301: return new OfferCallingCardPacket(header,bytes);
                        case 302: return new AcceptCallingCardPacket(header,bytes);
                        case 303: return new DeclineCallingCardPacket(header,bytes);
                        case 304: return new RezScriptPacket(header,bytes);
                        case 305: return new CreateInventoryItemPacket(header,bytes);
                        case 306: return new CreateLandmarkForEventPacket(header,bytes);
                        case 307: return new EventLocationRequestPacket(header,bytes);
                        case 308: return new EventLocationReplyPacket(header,bytes);
                        case 309: return new RegionHandleRequestPacket(header,bytes);
                        case 310: return new RegionIDAndHandleReplyPacket(header,bytes);
                        case 311: return new MoneyTransferRequestPacket(header,bytes);
                        case 312: return new MoneyTransferBackendPacket(header,bytes);
                        case 313: return new MoneyBalanceRequestPacket(header,bytes);
                        case 314: return new MoneyBalanceReplyPacket(header,bytes);
                        case 315: return new RoutedMoneyBalanceReplyPacket(header,bytes);
                        case 316: return new ActivateGesturesPacket(header,bytes);
                        case 317: return new DeactivateGesturesPacket(header,bytes);
                        case 318: return new MuteListUpdatePacket(header,bytes);
                        case 319: return new UseCachedMuteListPacket(header,bytes);
                        case 320: return new GrantUserRightsPacket(header,bytes);
                        case 321: return new ChangeUserRightsPacket(header,bytes);
                        case 322: return new OnlineNotificationPacket(header,bytes);
                        case 323: return new OfflineNotificationPacket(header,bytes);
                        case 324: return new SetStartLocationRequestPacket(header,bytes);
                        case 325: return new SetStartLocationPacket(header,bytes);
                        case 326: return new NetTestPacket(header,bytes);
                        case 327: return new SetCPURatioPacket(header,bytes);
                        case 328: return new SimCrashedPacket(header,bytes);
                        case 329: return new NameValuePairPacket(header,bytes);
                        case 330: return new RemoveNameValuePairPacket(header,bytes);
                        case 331: return new UpdateAttachmentPacket(header,bytes);
                        case 332: return new RemoveAttachmentPacket(header,bytes);
                        case 333: return new AssetUploadRequestPacket(header,bytes);
                        case 334: return new AssetUploadCompletePacket(header,bytes);
                        case 335: return new EmailMessageRequestPacket(header,bytes);
                        case 336: return new EmailMessageReplyPacket(header,bytes);
                        case 337: return new ScriptDataRequestPacket(header,bytes);
                        case 338: return new ScriptDataReplyPacket(header,bytes);
                        case 339: return new CreateGroupRequestPacket(header,bytes);
                        case 340: return new CreateGroupReplyPacket(header,bytes);
                        case 341: return new UpdateGroupInfoPacket(header,bytes);
                        case 342: return new GroupRoleChangesPacket(header,bytes);
                        case 343: return new JoinGroupRequestPacket(header,bytes);
                        case 344: return new JoinGroupReplyPacket(header,bytes);
                        case 345: return new EjectGroupMemberRequestPacket(header,bytes);
                        case 346: return new EjectGroupMemberReplyPacket(header,bytes);
                        case 347: return new LeaveGroupRequestPacket(header,bytes);
                        case 348: return new LeaveGroupReplyPacket(header,bytes);
                        case 349: return new InviteGroupRequestPacket(header,bytes);
                        case 350: return new InviteGroupResponsePacket(header,bytes);
                        case 351: return new GroupProfileRequestPacket(header,bytes);
                        case 352: return new GroupProfileReplyPacket(header,bytes);
                        case 353: return new GroupAccountSummaryRequestPacket(header,bytes);
                        case 354: return new GroupAccountSummaryReplyPacket(header,bytes);
                        case 355: return new GroupAccountDetailsRequestPacket(header,bytes);
                        case 356: return new GroupAccountDetailsReplyPacket(header,bytes);
                        case 357: return new GroupAccountTransactionsRequestPacket(header,bytes);
                        case 358: return new GroupAccountTransactionsReplyPacket(header,bytes);
                        case 359: return new GroupActiveProposalsRequestPacket(header,bytes);
                        case 360: return new GroupActiveProposalItemReplyPacket(header,bytes);
                        case 361: return new GroupVoteHistoryRequestPacket(header,bytes);
                        case 362: return new GroupVoteHistoryItemReplyPacket(header,bytes);
                        case 363: return new StartGroupProposalPacket(header,bytes);
                        case 364: return new GroupProposalBallotPacket(header,bytes);
                        case 365: return new TallyVotesPacket(header,bytes);
                        case 366: return new GroupMembersRequestPacket(header,bytes);
                        case 367: return new GroupMembersReplyPacket(header,bytes);
                        case 368: return new ActivateGroupPacket(header,bytes);
                        case 369: return new SetGroupContributionPacket(header,bytes);
                        case 370: return new SetGroupAcceptNoticesPacket(header,bytes);
                        case 371: return new GroupRoleDataRequestPacket(header,bytes);
                        case 372: return new GroupRoleDataReplyPacket(header,bytes);
                        case 373: return new GroupRoleMembersRequestPacket(header,bytes);
                        case 374: return new GroupRoleMembersReplyPacket(header,bytes);
                        case 375: return new GroupTitlesRequestPacket(header,bytes);
                        case 376: return new GroupTitlesReplyPacket(header,bytes);
                        case 377: return new GroupTitleUpdatePacket(header,bytes);
                        case 378: return new GroupRoleUpdatePacket(header,bytes);
                        case 379: return new LiveHelpGroupRequestPacket(header,bytes);
                        case 380: return new LiveHelpGroupReplyPacket(header,bytes);
                        case 381: return new AgentWearablesRequestPacket(header,bytes);
                        case 382: return new AgentWearablesUpdatePacket(header,bytes);
                        case 383: return new AgentIsNowWearingPacket(header,bytes);
                        case 384: return new AgentCachedTexturePacket(header,bytes);
                        case 385: return new AgentCachedTextureResponsePacket(header,bytes);
                        case 386: return new AgentDataUpdateRequestPacket(header,bytes);
                        case 387: return new AgentDataUpdatePacket(header,bytes);
                        case 388: return new GroupDataUpdatePacket(header,bytes);
                        case 389: return new AgentGroupDataUpdatePacket(header,bytes);
                        case 390: return new AgentDropGroupPacket(header,bytes);
                        case 391: return new LogTextMessagePacket(header,bytes);
                        case 392: return new CreateTrustedCircuitPacket(header,bytes);
                        case 393: return new DenyTrustedCircuitPacket(header,bytes);
                        case 394: return new RequestTrustedCircuitPacket(header,bytes);
                        case 395: return new RezSingleAttachmentFromInvPacket(header,bytes);
                        case 396: return new RezMultipleAttachmentsFromInvPacket(header,bytes);
                        case 397: return new DetachAttachmentIntoInvPacket(header,bytes);
                        case 398: return new CreateNewOutfitAttachmentsPacket(header,bytes);
                        case 399: return new UserInfoRequestPacket(header,bytes);
                        case 400: return new UserInfoReplyPacket(header,bytes);
                        case 401: return new UpdateUserInfoPacket(header,bytes);
                        case 402: return new ParcelRenamePacket(header,bytes);
                        case 403: return new InitiateDownloadPacket(header,bytes);
                        case 404: return new SystemMessagePacket(header,bytes);
                        case 405: return new MapLayerRequestPacket(header,bytes);
                        case 406: return new MapLayerReplyPacket(header,bytes);
                        case 407: return new MapBlockRequestPacket(header,bytes);
                        case 408: return new MapNameRequestPacket(header,bytes);
                        case 409: return new MapBlockReplyPacket(header,bytes);
                        case 410: return new MapItemRequestPacket(header,bytes);
                        case 411: return new MapItemReplyPacket(header,bytes);
                        case 412: return new SendPostcardPacket(header,bytes);
                        case 413: return new RpcChannelRequestPacket(header,bytes);
                        case 414: return new RpcChannelReplyPacket(header,bytes);
                        case 415: return new RpcScriptRequestInboundPacket(header,bytes);
                        case 416: return new RpcScriptRequestInboundForwardPacket(header,bytes);
                        case 417: return new RpcScriptReplyInboundPacket(header,bytes);
                        case 418: return new ScriptMailRegistrationPacket(header,bytes);
                        case 419: return new ParcelMediaCommandMessagePacket(header,bytes);
                        case 420: return new ParcelMediaUpdatePacket(header,bytes);
                        case 421: return new LandStatRequestPacket(header,bytes);
                        case 422: return new LandStatReplyPacket(header,bytes);
                        case 423: return new ErrorPacket(header,bytes);
                        case 424: return new ObjectIncludeInSearchPacket(header,bytes);
                        case 425: return new RezRestoreToWorldPacket(header,bytes);
                    }
                case PacketFrequency.Medium:
                    switch (header.getID())
                    {
                        case 1: return new ObjectAddPacket(header, bytes);
                        case 2: return new MultipleObjectUpdatePacket(header, bytes);
                        case 3: return new RequestMultipleObjectsPacket(header, bytes);
                        case 4: return new ObjectPositionPacket(header, bytes);
                        case 5: return new RequestObjectPropertiesFamilyPacket(header, bytes);
                        case 6: return new CoarseLocationUpdatePacket(header, bytes);
                        case 7: return new CrossedRegionPacket(header, bytes);
                        case 8: return new ConfirmEnableSimulatorPacket(header, bytes);
                        case 9: return new ObjectPropertiesPacket(header, bytes);
                        case 10: return new ObjectPropertiesFamilyPacket(header, bytes);
                        case 11: return new ParcelPropertiesRequestPacket(header, bytes);
                        case 12: return new SimStatusPacket(header, bytes);
                        case 13: return new AttachedSoundPacket(header, bytes);
                        case 14: return new AttachedSoundGainChangePacket(header, bytes);
                        case 15: return new PreloadSoundPacket(header, bytes);
                        case 16: return new InternalScriptMailPacket(header, bytes);
                        case 17: return new ViewerEffectPacket(header, bytes);
                    }
                case PacketFrequency.High:
                    switch (header.getID())
                    {
                        case 1: return new StartPingCheckPacket(header, bytes);
                        case 2: return new CompletePingCheckPacket(header, bytes);
                        case 3: return new NeighborListPacket(header, bytes);
                        case 4: return new AgentUpdatePacket(header, bytes);
                        case 5: return new AgentAnimationPacket(header, bytes);
                        case 6: return new AgentRequestSitPacket(header, bytes);
                        case 7: return new AgentSitPacket(header, bytes);
                        case 8: return new RequestImagePacket(header, bytes);
                        case 9: return new ImageDataPacket(header, bytes);
                        case 10: return new ImagePacketPacket(header, bytes);
                        case 11: return new LayerDataPacket(header, bytes);
                        case 12: return new ObjectUpdatePacket(header, bytes);
                        case 13: return new ObjectUpdateCompressedPacket(header, bytes);
                        case 14: return new ObjectUpdateCachedPacket(header, bytes);
                        case 15: return new ImprovedTerseObjectUpdatePacket(header, bytes);
                        case 16: return new KillObjectPacket(header, bytes);
                        case 17: return new TransferPacketPacket(header, bytes);
                        case 18: return new SendXferPacketPacket(header, bytes);
                        case 19: return new ConfirmXferPacketPacket(header, bytes);
                        case 20: return new AvatarAnimationPacket(header, bytes);
                        case 21: return new AvatarSitResponsePacket(header, bytes);
                        case 22: return new CameraConstraintPacket(header, bytes);
                        case 23: return new ParcelPropertiesPacket(header, bytes);
                        case 24: return new EdgeDataPacketPacket(header, bytes);
                        case 25: return new ChildAgentUpdatePacket(header, bytes);
                        case 26: return new ChildAgentAlivePacket(header, bytes);
                        case 27: return new ChildAgentPositionUpdatePacket(header, bytes);
                        case 28: return new AtomicPassObjectPacket(header, bytes);
                        case 29: return new SoundTriggerPacket(header, bytes);
                    }
            }
            throw new Exception("Unknown packet ID");
        }

}
